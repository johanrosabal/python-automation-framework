[pytest]
# Log Information Documentation Reference
# https://pytest-with-eric.com/pytest-best-practices/pytest-logging/
# - NOTSET (0): This level captures all messages, regardless of their severity.
# - DEBUG (10): This level is used for anything that can help identify potential problems, like variable values or the steps that a program takes.
# - INFO (20): This level is used to confirm that things are working as expected.
# - WARNING (30): This level indicates that something unexpected happened, or there may be some problem in the near future (like ‘disk space low’). However, the software is still working as expected.
# - ERROR (40): This level indicates a more serious problem that prevented the software from performing a function.
# - CRITICAL (50): This level denotes a very serious error that might prevent the program from continuing to run.
# pytest --capture=no     # show print statements in console
# pytest -s               # equivalent to previous command

# Report Levels and Format

log_cli=true
log_level=INFO
log_format =  %(asctime)s [%(levelname)8s] [%(name)s] %(message)s (%(filename)s:%(lineno)s)
log_date_format = %Y-%m-%d %H:%M:%S
log_cli_date_format=%Y-%m-%d %H:%M:%S
log_cli_format = %(asctime)s [%(levelname)8s] [%(name)s] %(message)s (%(filename)s:%(lineno)s)
log_file = ../../../../logs/python-framework_pytest-logs.txt

# Files Test
python_files =
    test_*.py

# Functions to be tested
python_functions =
    test_*

# This line add commands to CLI
addopts = --alluredir=reports/allure-results --junitxml=report.xml
junit_family = xunit2

markers =
    web: Customize mark for tests web
    test_key(key): Mark tests with a specific key for Xray
    test_id(id): Marca personalizada para asociar pruebas con identificadores específicos.